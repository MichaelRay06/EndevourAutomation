"use strict";
/* IMPORT */
var consts_1 = require("./consts");
/* METHODS */
function get(object, path, fallback) {
    if (typeof path !== 'string' || typeof object !== 'object' || object === null)
        return fallback;
    var keys = path.split(consts_1.DIVIDER);
    for (var i = 0, l = keys.length; i < l; i++) {
        object = object[keys[i]];
        if (object === undefined)
            return fallback;
        if (object === null)
            return (i === l - 1) ? object : fallback;
    }
    return object;
}
function has(object, path) {
    return get(object, path) !== undefined;
}
function set(object, path, value) {
    if (typeof path !== 'string' || typeof object !== 'object' || object === null)
        return object;
    var keys = path.split(consts_1.DIVIDER), source = object;
    for (var i = 0, l = keys.length; i < l; i++) {
        var key = keys[i];
        if (i === l - 1) {
            object[key] = value;
        }
        else {
            var value_1 = object[key];
            if (typeof value_1 !== 'object' || value_1 === null) {
                object = object[key] = {};
            }
            else {
                object = value_1;
            }
        }
    }
    return source;
}
function del(object, path) {
    if (typeof path !== 'string' || typeof object !== 'object' || object === null)
        return;
    var keys = path.split(consts_1.DIVIDER);
    for (var i = 0, l = keys.length; i < l; i++) {
        if (i === l - 1) {
            delete object[keys[i]];
        }
        else {
            var value = object[keys[i]];
            if (typeof value !== 'object' || value === null)
                return;
            object = value;
        }
    }
}
function flat(object, prefix) {
    if (prefix === void 0) { prefix = ''; }
    var flattened = {};
    for (var key in object) {
        var value = object[key];
        if (value === undefined)
            continue;
        if (typeof value !== 'object' || value === null) {
            flattened["" + prefix + key] = value;
        }
        else {
            var flattenedDeep = flat(value, "" + prefix + key + consts_1.DIVIDER);
            for (var key_1 in flattenedDeep) {
                flattened[key_1] = flattenedDeep[key_1];
            }
        }
    }
    return flattened;
}
function unflat(object) {
    var unflattened = {};
    for (var key in object) {
        var value = object[key];
        if (value === undefined)
            continue;
        set(unflattened, key, typeof value === 'object' && value !== null ? unflat(value) : value);
    }
    return unflattened;
}
/* PATH PROP */
var PathProp = { get: get, has: has, set: set, delete: del, flat: flat, unflat: unflat };
/* EXPORT */
module.exports = PathProp;
module.exports.default = PathProp;
Object.defineProperty(module.exports, "__esModule", { value: true });
