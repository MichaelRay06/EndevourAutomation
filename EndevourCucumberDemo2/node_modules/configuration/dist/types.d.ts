import { ValidateFunction } from 'ajv';
import { JSONSchema7 } from 'json-schema';
declare type Scope = string;
declare type ScopeAll = '*';
declare type Scopes = {
    [key: string]: Provider;
};
declare type Path = string;
declare type Data = ValueObject;
declare type DataRaw = string;
declare type DataUpdate = {
    data: Data;
    dataRaw: DataRaw;
};
declare type Value = ValuePrimitive | ValueArray | ValueObject;
declare type ValuePrimitive = null | boolean | number | string;
declare type ValueArray = Array<Value>;
declare type ValueObject = {
    [key: string]: Value;
};
declare type Schema = JSONSchema7;
declare type ExtendData = {
    defaults?: Data;
    schema?: Schema;
};
declare type ChangeHandler = (value: Value | undefined, valuePrev: Value | undefined) => void;
declare type ChangeHandlerData = {
    callback: ChangeHandler;
    getter: () => Value | undefined;
    value: Value | undefined;
};
declare type Disposer = () => void;
declare type Options = {
    providers: Provider[];
    defaults: Data;
    schema: Schema;
    validator: ValidateFunction;
    scope: Scope;
};
declare type Provider = import('./providers/abstract').default;
declare type ProviderChangeHandler = () => void;
declare type ProviderAbstractOptions = {
    scope: string;
    indentation: string | number;
};
declare type ProviderFileOptions = ProviderAbstractOptions & {
    path: string;
    watch?: boolean;
};
declare type ProviderJSONOptions = ProviderFileOptions;
declare type ProviderMemoryOptions = ProviderAbstractOptions;
declare type ProviderStorageOptions = ProviderAbstractOptions & {
    id: string;
    storage: Storage;
};
export { Scope, ScopeAll, Scopes, Path, Data, DataRaw, DataUpdate, ExtendData, Value, ValueObject, Schema, ChangeHandler, ChangeHandlerData, Disposer, Options, Provider, ProviderChangeHandler, ProviderAbstractOptions, ProviderFileOptions, ProviderJSONOptions, ProviderMemoryOptions, ProviderStorageOptions };
