"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
const plain_object_is_equal_1 = require("plain-object-is-equal");
const config_1 = require("../config");
const type_1 = require("../utils/type");
/* ABSTRACT */
class ProviderAbstract {
    constructor(options) {
        var _a, _b, _c, _d, _e;
        if (((_a = options) === null || _a === void 0 ? void 0 : _a.scope) === config_1.SCOPE_ALL)
            throw new Error(`"${config_1.SCOPE_ALL}" is not a valid scope name for a provider`);
        this.scope = (_c = (_b = options) === null || _b === void 0 ? void 0 : _b.scope, (_c !== null && _c !== void 0 ? _c : config_1.DEFAULTS.scope));
        this.indentation = (_e = (_d = options) === null || _d === void 0 ? void 0 : _d.indentation, (_e !== null && _e !== void 0 ? _e : config_1.DEFAULTS.indentation));
        this.handlers = [];
        this.init();
    }
    init() {
        const { data, dataRaw } = this.readSync();
        this.data = data;
        this.dataRaw = dataRaw;
        this.dataSchema = this.validate(this.data);
    }
    dispose() { }
    validate(data) {
        return data;
    }
    isEqual(data) {
        return type_1.default.isString(data) ? data === this.dataRaw : plain_object_is_equal_1.default(data, this.data);
    }
    triggerChange() {
        for (let i = 0, l = this.handlers.length; i < l; i++) {
            this.handlers[i]();
        }
    }
    onChange(handler) {
        this.handlers.push(handler);
        return () => {
            this.handlers.splice(this.handlers.indexOf(handler), 1);
        };
    }
}
/* EXPORT */
exports.default = ProviderAbstract;
