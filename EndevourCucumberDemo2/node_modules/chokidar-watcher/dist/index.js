"use strict";
/* IMPORT */
const chokidar = require("chokidar");
const consts_1 = require("./consts");
const get_id_1 = require("./get_id");
const get_lock_1 = require("./get_lock");
/* WATCHER */
//TODO: Write a test suite
function watcher(paths, options = {}, handlers = {}) {
    /* VARIABLES */
    const locksAdd = {}, locksUnlink = {};
    /* HELPERS */
    function emit(event, args) {
        const handler = handlers[event];
        if (!handler)
            return;
        handler.apply(undefined, args);
    }
    /* HANDLERS */
    function change(filePath, stats) {
        emit('change', [filePath, stats]);
    }
    function add(filePath, stats) {
        const id = get_id_1.default(filePath, stats);
        get_lock_1.default(id, consts_1.RENAME_TIMEOUT, {
            locks: {
                read: locksUnlink,
                write: locksAdd
            },
            handlers: {
                free: () => emit('add', [filePath, stats]),
                override: (prevPath) => emit('rename', [prevPath, filePath]),
                overridden: () => filePath
            }
        });
    }
    function unlink(filePath) {
        const id = get_id_1.default(filePath);
        get_lock_1.default(id, consts_1.RENAME_TIMEOUT, {
            locks: {
                read: locksAdd,
                write: locksUnlink
            },
            handlers: {
                free: () => emit('unlink', [filePath]),
                override: (newPath) => emit('rename', [filePath, newPath]),
                overridden: () => filePath
            }
        });
    }
    /* CHOKIDAR */
    const chokidarOptions = Object.assign({}, options, { ignoreInitial: false });
    return chokidar.watch(paths, chokidarOptions).on('add', add).on('change', change).on('unlink', unlink);
}
/* EXPORT */
module.exports = watcher;
module.exports.default = watcher;
Object.defineProperty(module.exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLFlBQVk7O0FBRVoscUNBQXFDO0FBSXJDLHFDQUF3QztBQUN4QyxxQ0FBNkI7QUFDN0IseUNBQWlDO0FBRWpDLGFBQWE7QUFFYiwwQkFBMEI7QUFFMUIsU0FBUyxPQUFPLENBQUcsS0FBYSxFQUFFLFVBQXdCLEVBQUUsRUFBRSxXQUFxQixFQUFFO0lBRW5GLGVBQWU7SUFFZixNQUFNLFFBQVEsR0FBVSxFQUFFLEVBQ3BCLFdBQVcsR0FBVSxFQUFFLENBQUM7SUFFOUIsYUFBYTtJQUViLFNBQVMsSUFBSSxDQUFHLEtBQVksRUFBRSxJQUFXO1FBRXZDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVoQyxJQUFLLENBQUMsT0FBTztZQUFHLE9BQU87UUFFdkIsT0FBTyxDQUFDLEtBQUssQ0FBRyxTQUFTLEVBQUUsSUFBSSxDQUFFLENBQUM7SUFFcEMsQ0FBQztJQUVELGNBQWM7SUFFZCxTQUFTLE1BQU0sQ0FBRyxRQUFnQixFQUFFLEtBQWdCO1FBRWxELElBQUksQ0FBRyxRQUFRLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUUsQ0FBQztJQUV2QyxDQUFDO0lBRUQsU0FBUyxHQUFHLENBQUcsUUFBZ0IsRUFBRSxLQUFnQjtRQUUvQyxNQUFNLEVBQUUsR0FBRyxnQkFBSyxDQUFHLFFBQVEsRUFBRSxLQUFLLENBQUUsQ0FBQztRQUVyQyxrQkFBTyxDQUFHLEVBQUUsRUFBRSx1QkFBYyxFQUFFO1lBQzVCLEtBQUssRUFBRTtnQkFDTCxJQUFJLEVBQUUsV0FBVztnQkFDakIsS0FBSyxFQUFFLFFBQVE7YUFDaEI7WUFDRCxRQUFRLEVBQUU7Z0JBQ1IsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBRyxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUU7Z0JBQzdDLFFBQVEsRUFBRSxDQUFFLFFBQWdCLEVBQUcsRUFBRSxDQUFDLElBQUksQ0FBRyxRQUFRLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUU7Z0JBQ3pFLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxRQUFRO2FBQzNCO1NBQ0YsQ0FBQyxDQUFDO0lBRUwsQ0FBQztJQUVELFNBQVMsTUFBTSxDQUFHLFFBQWdCO1FBRWhDLE1BQU0sRUFBRSxHQUFHLGdCQUFLLENBQUcsUUFBUSxDQUFFLENBQUM7UUFFOUIsa0JBQU8sQ0FBRyxFQUFFLEVBQUUsdUJBQWMsRUFBRTtZQUM1QixLQUFLLEVBQUU7Z0JBQ0wsSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsS0FBSyxFQUFFLFdBQVc7YUFDbkI7WUFDRCxRQUFRLEVBQUU7Z0JBQ1IsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBRyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBRTtnQkFDekMsUUFBUSxFQUFFLENBQUUsT0FBZSxFQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUcsUUFBUSxFQUFFLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFFO2dCQUN2RSxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsUUFBUTthQUMzQjtTQUNGLENBQUMsQ0FBQztJQUVMLENBQUM7SUFFRCxjQUFjO0lBRWQsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxDQUFFLENBQUM7SUFFaEYsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFHLEtBQUssRUFBRSxlQUFlLENBQUUsQ0FBQyxFQUFFLENBQUcsS0FBSyxFQUFFLEdBQUcsQ0FBRSxDQUFDLEVBQUUsQ0FBRyxRQUFRLEVBQUUsTUFBTSxDQUFFLENBQUMsRUFBRSxDQUFHLFFBQVEsRUFBRSxNQUFNLENBQUUsQ0FBQztBQUVySCxDQUFDO0FBRUQsWUFBWTtBQUVaLGtCQUFlLE9BQU8sQ0FBQyJ9